<div class="row">
    <div class="col justify-content-center">
        @if (GameType == null)
        {
            <h3>Select a type to see a chart</h3>
        }
        else
        {
            <h2>@GameType.ToString() over 30 days</h2>
            <hr/>
        }
    </div>
</div>
@if (_last30.Any())
{
    <div class="row justify-content-center">
        <div class="col text-center">
            <SfSparkline XName="GameRound"
                         YName="CompletionRound"
                         ValueType="SparklineValueType.Category"
                         TValue="Round"
                         DataSource="@MyRounds"
                         Height="150px"
                         LineWidth="2"
                         Fill="#9b9b9b"
                         LowPointColor="#ff0000"
                         Width="100%">
                <SparklineDataLabelSettings Visible="new List<VisibleType> { VisibleType.Start, VisibleType.End }"></SparklineDataLabelSettings>
                <SparklineMarkerSettings Fill="#6330b3" Visible="new List<VisibleType> { VisibleType.All }"></SparklineMarkerSettings>
                <SparklineTooltipSettings TValue="Round" Visible="true"></SparklineTooltipSettings>
            </SfSparkline>
        </div>
    </div>
}


@code {

    [Parameter]
    public Statistics? MyStatistics { get; set; }

    [Parameter]
    public List<Round> MyRounds { get; set; } = new();

    [Parameter]
    public List<User> Users { get; set; } = new();

    [Parameter]
    public string MyId { get; set; } = string.Empty;

    [Parameter]
    public GameType? GameType { get; set; }

    private List<Round> _last30 = new();

    protected override void OnParametersSet()
    {
        if (GameType != null)
        {
            var startDate = DateTime.Parse(GameType.GetCustomAttribute<StartDateAttribute>()!.StartDate);
            var roundNumber = (int)DateTimeOffset.UtcNow.Subtract(startDate).TotalDays;
            _last30.Clear();
            for (int i = 30; i >= 0; i--)
            {
                var round = MyRounds.FirstOrDefault(_ => _.GameRound == roundNumber - i);
                if (round == null)
                {
                    _last30.Add(new()
                    {
                        GameRound = roundNumber - i,
                        CompletionRound = 0,
                        Rounds = 6
                    });
                }
                else
                {
                    _last30.Add(round);
                }
            }
        }
        base.OnParametersSet();
    }
}