@inject RoundService RoundService
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage
@attribute [Authorize]
@if (MyStatistics != null)
{
    <div class="row stats my-4">
        <div class="col justify-content-center">
            <div class="row justify-content-center">
                <div class="col text-center">
                    <h2>@MyStatistics.RoundsPlayed</h2>
                    <p>Played</p>
                </div>
                <div class="col text-center">
                    <h2>@MyStatistics.WinPercentage</h2>
                    <p>Win %</p>
                </div>
                <div class="col text-center">
                    <h2>@MyStatistics.CurrentStreak()</h2>
                    <p>Current Streak</p>
                </div>
                <div class="col text-center">
                    <h2>@MyStatistics.MaxStreak()</h2>
                    <p>Max Streak</p>
                </div>
            </div>
        </div>
    </div>
    <div class="row">
        <div class="col justify-content-center">
            <select class="form-select" value="@_compareUserId" @onchange="(async (e) => await PlayerSelected(e))">
                <option value="opponent" selected>Select an opponent</option>
                @foreach (var user in Users)
                {
                    <option selected="@(user.Id.ToString() == _compareUserId)" value="@user.Id">@(user.DisplayName)</option>
                }
            </select>
        </div>
    </div>
    @if (_compareStatistics != null)
    {
        <div class="row stats my-4">
            <div class="col justify-content-center">
                <div class="row justify-content-center">
                    <div class="col text-center">
                        <h2>@_compareStatistics.RoundsPlayed</h2>
                        <p>Played</p>
                    </div>
                    <div class="col text-center">
                        <h2>@_compareStatistics.WinPercentage</h2>
                        <p>Win %</p>
                    </div>
                    <div class="col text-center">
                        <h2>@_compareStatistics.CurrentStreak()</h2>
                        <p>Current Streak</p>
                    </div>
                    <div class="col text-center">
                        <h2>@_compareStatistics.MaxStreak()</h2>
                        <p>Max Streak</p>
                    </div>
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col">
                <h5 class="mt-0 mb-1">Compare a day</h5>
            </div>
        </div>
        <div class="row">
            <div class="col">
                <SfDatePicker
                    Format="yyyy-MM-dd"
                    Value="@_selectedDate"
                    
                    TValue="DateTimeOffset?" Placeholder='Choose a Date' ValueChanged="@(async (e) => { await DateChanged(e); })">
                </SfDatePicker>
            </div>
        </div>
        <div class="row my-1">
            <div class="col">
                <div>
                    <strong>You: </strong>
                </div>
                @if (_myDay != null)
                {
                    <div>
                        @($"{_myDay.CompletionRound}/{_myDay.Rounds} Time: {_myDay.CompletedDateTime.ToString("HH:mm:ss")} UTC")
                    </div>
                }
                else
                {
                    <div>
                        <span>No stats for this day</span>
                    </div>
                }
            </div>
        </div>
        <div class="row pt-2 my-1">
            <div class="col">
                <div>
                    <strong>@_compareUser: </strong>
                </div>
                @if (_compareDay != null)
                {
                    <div>
                        @($"{_compareDay.CompletionRound}/{_compareDay.Rounds} Time: {_compareDay.CompletedDateTime.ToString("HH:mm:ss")} UTC")
                    </div>
                }
                else
                {
                    <div>
                        <span>No stats for this day</span>
                    </div>
                }
            </div>
        </div>
    }
}

@code {

    [Parameter]
    public Statistics? MyStatistics { get; set; }

    [Parameter]
    public List<Round> MyRounds { get; set; } = new();

    [Parameter]
    public List<User> Users { get; set; } = new();

    [Parameter]
    public string MyId { get; set; } = string.Empty;

    [Parameter]
    public GameType? GameType { get; set; }

    private Statistics? _compareStatistics;

    private string _compareUserId = "opponent";

    private string _compareUser = "opponent";

    private DateTimeOffset? _selectedDate;

    private Round? _myDay;

    private Round? _compareDay;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var user = await LocalStorage.GetItemAsync<string>("wcwUser");
            if (user != null)
            {
                _compareUserId = user;
                await PlayerSelected(new ChangeEventArgs
                {
                    Value = user
                });
                await InvokeAsync(StateHasChanged);
            }
        }
    }

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();
        _selectedDate = DateTimeOffset.UtcNow;
        await PlayerSelected(new ChangeEventArgs { Value = "opponent" });
    }

    private async Task PlayerSelected(ChangeEventArgs e)
    {
        _compareStatistics = null;
        _compareUserId = e.Value?.ToString() ?? "opponent";
        if (!string.IsNullOrWhiteSpace(e.Value?.ToString()) && !(e.Value?.ToString()?.Contains("opponent") ?? true))
        {
            var rounds = await RoundService.GetRoundsAsync(MyRounds.First().Type, e.Value?.ToString() ?? string.Empty);
            _compareStatistics = new Statistics(rounds);
            await DateChanged(null);
            LocalStorage.SetItemAsync("wcwUser", _compareUserId);
        }
    }

    private async Task DateChanged(DateTimeOffset? value)
    {
         _selectedDate = value ?? _selectedDate;
        if (GameType.HasValue && _selectedDate.HasValue)
        {
            var (my, opponent) = await RoundService.CompareDateAsync(GameType.Value, _selectedDate.Value, MyId, _compareUserId);
            _myDay = my;
            _compareUser = Users.FirstOrDefault(_ => _.Id == _compareUserId)?.DisplayName ?? "";
            _compareDay = opponent;    
        }
    }
}