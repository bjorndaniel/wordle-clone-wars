@using WordleCloneWars.Helpers
@inject IJSRuntime JSRuntime
@inject RoundService RoundService
<form>
    <div class="row">
        <div class="col">
            <h2>Paste your results below</h2>
            <hr/>
        </div>
    </div>
    <div class="row">
        <div class="col-lg-6 col-sm-12 offset-lg-3 text-start">
            <label for="roundData" class="form-label">Result</label>
            <textarea id="roundData" class="form-control" rows="5"  ></textarea>
            @if (_currentRound != null)
            {
                <div class="text-start mt-3">
                    <span>Click Save to save the following:</span><br/>
                    <span>Game: <strong><h5>@_currentRound.Type.ToString()</h5></strong></span>
                    <span>Game round: <strong><h5>@_currentRound.GameRound</h5></strong></span>
                    <span>Result: <strong><h5>@_currentRound.CompletionRound/@_currentRound.Rounds</h5></strong></span>
                </div>
            }
        </div>

    </div>
    <div class="row py-4">
        <div class="col-lg-6 col-sm-12 offset-lg-3 text-center">
            <button type="submit" disabled="@(_currentRound == null)" @onclick="SaveRound" class="w-100 btn btn-lg btn-success">Save</button>
        </div>
    </div>
</form>

@code {

    private Round? _currentRound;
    private DotNetObjectReference<UploadResult>? _objRef;
    private string _userId;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _objRef = DotNetObjectReference.Create(this);
            await JSRuntime.InvokeAsync<object>("setupPasteEvent", _objRef);
        }
        await base.OnAfterRenderAsync(firstRender);
    }

    [JSInvokable("CheckResult")]
    public async Task CheckResult(string text)
    {
        Console.WriteLine(text);
        _currentRound = RoundHelper.GetRound(text);
        Console.WriteLine(_currentRound?.Type);
        await InvokeAsync(StateHasChanged);
    }

    public async Task SaveRound()
    {
        var result = await RoundService.SaveRound(_currentRound);
        if (result)
        {
            _currentRound = null;
        }
    }

    public void Dispose()
    {
        _objRef?.Dispose();
    }

}