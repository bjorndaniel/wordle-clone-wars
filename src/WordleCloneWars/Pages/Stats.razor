@page "/Stats"
@inject RoundService RoundService
@inject AuthenticationStateProvider AuthProvider;
@inject IJSRuntime JSRuntime
<div class="row">
    <div class="col">
        <h2>See your stats and compare with others</h2>
        <hr/>
    </div>
</div>
<div class="row">
    <div class="col-lg-6 col-sm justify-content-center offset-lg-3">
        <select class="form-select" @onchange="(async (e) => await GameTypeSelected(e))">
            <option selected>Select a game type</option>
            @foreach (var type in _gameTypes)
            {
                <option value="@type.Value">@type.Text</option>
            }
        </select>
    </div>
</div>
<div class="row my-2">
    <div class="col-lg-6 offset-lg-3 col-sm-12 justify-content-start text-start">
        <ul class="nav nav-tabs">
            <li class="nav-item">
                <button id="btnheadToHead" class="nav-link active" @onclick="@(async () => await SwitchTab("headToHead"))">Head to Head</button>
            </li>
            <li class="nav-item">
                <button id="btnallUsers" class="nav-link" @onclick="@(async () => await SwitchTab("allUsers"))">All users</button>
            </li>
            <li class="nav-item">
                <button id="btnmyStats" class="nav-link" @onclick="@(async () => await SwitchTab("myStats"))">My stats</button>
            </li>
        </ul>
    </div>
</div>
<div class="row h-50">
    <div class="col-lg-6 offset-lg-3 col-sm-12 justify-content-center">
        <div class="tab-content h-75" id="myTabContent">
            <div class="tab-pane fade show active h-100" id="headToHead" role="tabpanel" aria-labelledby="home-tab">
                <HeadToHead Users="@_users" MyRounds="@_myRounds" MyStatistics="@_myStatistics"></HeadToHead>
            </div>
            <div class="tab-pane fade" id="allUsers" role="tabpanel">All users to be implemented</div>
            <div class="tab-pane fade" id="myStats" role="tabpanel">My stats to be implemented</div>
        </div>
    </div>
</div>


@code {

    private readonly IEnumerable<EnumRecord> _gameTypes = Enum.GetValues<GameType>()
        .Select(_ => new EnumRecord
        {
            Value = (int)_,
            Text = _.ToString()
        }).OrderBy(_ => _.Text);

    private List<Round> _myRounds = new();
    private Statistics? _myStatistics;
    private Statistics? _compareStatistics;
    private List<User> _users = new();
    private string _myId = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        var state = await AuthProvider.GetAuthenticationStateAsync();
        var user = state.User;
        _myId = user.FindFirst(c => c.Type == ClaimTypes.NameIdentifier)?.Value ?? string.Empty;
        _users = await RoundService.GetOpponents(_myId);
    }

    private async Task GameTypeSelected(ChangeEventArgs e)
    {
        _myRounds = new List<Round>();
        _myStatistics = null;
        if (int.TryParse(e.Value?.ToString() ?? string.Empty, out var gameType))
        {
            _myRounds = await RoundService.GetRounds((GameType)Enum.Parse(typeof(GameType), e.Value?.ToString() ?? string.Empty), _myId);
            _myStatistics = new Statistics(_myRounds);
        }
    }

    private async Task SwitchTab(string id)
    {
        await JSRuntime.InvokeAsync<object>("switchTab", id);
    }

    private record EnumRecord
    {
        public string Text { get; set; } = string.Empty;
        public int Value { get; set; }
    }

}